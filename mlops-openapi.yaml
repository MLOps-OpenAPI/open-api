openapi: 3.0.3
info:
  title: MLOps OpenAPI Specification
  version: 0.1.0
  description: >
    This API provides endpoints for MLOps processes, including data intake,
    data processing, model training, data evaluation, data card finalization,
    and other MLOps operations.

servers:
  - url: https://api.mlops.example.com/v1
    description: Production server

paths:
  /data-intake:
    post:
      summary: Data Intake
      description: >
        Creates a new data card, or updates one if it exsists
      tags:
        - Data Ingestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DataCard:
                  type: string
                  example: "test3"
                Bucket:
                  type: string
                  example: "anthony-test-bucket"
                S3Url:
                  type: string
                  format: uri
                  example: "https://minio-api-minio.apps.cluster-497z4.497z4.sandbox2736.opentlc.com"
                AccessKey:
                  type: string
                SecretKey:
                  type: string
                path:
                  type: string
                  example: "/test_folder"
                  default: "/"
              required:
                - DataCard
                - Bucket
                - S3Url
                - AccessKey
                - SecretKey
      responses:
        "200":
          description: Successful data intake.
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventListener:
                    type: string
                  namespace:
                    type: string
                  eventListenerUID:
                    type: string
                  eventID:
                    type: string
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.

  /data-filtering:
    post:
      summary: Data Filtering
      description: >
        Filter raw data based on specified criteria to produce filtered data.
      tags:
        - Data Processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataFilteringRequest'
      responses:
        '200':
          description: Data filtered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFilteringResponse'
        '400':
          description: Invalid filtering criteria.
        '500':
          description: Internal server error.

  /data-labeling:
    post:
      summary: Data Labeling
      description: >
        Apply labels to filtered data to create a labeled dataset.
      tags:
        - Data Processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataLabelingRequest'
      responses:
        '200':
          description: Data labeled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLabelingResponse'
        '400':
          description: Invalid labeling information.
        '500':
          description: Internal server error.

  /data-analysis:
    post:
      summary: Data Analysis
      description: >
        Analyze the curated dataset to generate insights and prepare for machine learning.
      tags:
        - Exploratory Data Analysis (EDA)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataAnalysisRequest'
      responses:
        '200':
          description: Data analysis completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAnalysisResponse'
        '400':
          description: Data analysis failed due to invalid data or parameters.
        '500':
          description: Internal server error.

  /data-ml-ready:
    post:
      summary: Data Transformation
      description: >
        Prepare data for machine learning by transforming and cleaning it.
      tags:
        - Data Preparation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataMLReadyRequest'
      responses:
        '200':
          description: Data prepared for machine learning successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMLReadyResponse'
        '400':
          description: Data preparation failed.
        '500':
          description: Internal server error.

  /data-test:
    post:
      summary: Data Testing
      description: >
        Test the curated dataset to ensure quality and consistency.
      tags:
        - Data Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataTestRequest'
      responses:
        '200':
          description: Data testing completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataTestResponse'
        '400':
          description: Data testing failed.
        '500':
          description: Internal server error.

  /data-evaluation:
    post:
      summary: Data Evaluation
      description: >
        Evaluate the curated datasets to gain confidence in the data.
      tags:
        - Data Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataEvaluationRequest'
            examples:
              example1:
                value:
                  draftDataCardId: "12345"
                  curatedDataId: "67890"
                  metadataTransforms: {}
                  dataTestReportId: "54321"
                  groundTruthLabelsId: "09876"
      responses:
        '200':
          description: Data evaluation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataEvaluationResponse'
        '400':
          description: Data evaluation failed.
        '500':
          description: Internal server error.

  /data-card-finalization:
    post:
      summary: Data Card Finalization
      description: >
        Finalize the data card to communicate dataset quality to customers.
      tags:
        - Metadata Documentation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataCardFinalizationRequest'
      responses:
        '200':
          description: Data card finalized successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCardFinalizationResponse'
        '400':
          description: Data card finalization failed.
        '500':
          description: Internal server error.

  /model-training:
    post:
      summary: Model Training
      description: >
        Train a machine learning model using the prepared dataset.
      tags:
        - Model Training
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelTrainingRequest'
      responses:
        '200':
          description: Model trained successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelTrainingResponse'
        '400':
          description: Model training failed due to invalid data or parameters.
        '500':
          description: Internal server error.

  /model-containerization:
    post:
      summary: Model Containerization
      description: >
        Containerize the trained model for deployment.
      tags:
        - Model Deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelContainerizationRequest'
      responses:
        '200':
          description: Model containerized successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelContainerizationResponse'
        '400':
          description: Model containerization failed.
        '500':
          description: Internal server error.

  /model-hardening:
    post:
      summary: Model Hardening
      description: >
        Harden the containerized model to ensure security and compliance.
      tags:
        - Model Deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelHardeningRequest'
      responses:
        '200':
          description: Model hardened successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelHardeningResponse'
        '400':
          description: Model hardening failed.
        '500':
          description: Internal server error.

  /risk-assessment:
    post:
      summary: Risk Assessment
      description: >
        Perform a risk assessment on the hardened model before deployment.
      tags:
        - Model Deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskAssessmentRequest'
      responses:
        '200':
          description: Risk assessment completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskAssessmentResponse'
        '400':
          description: Risk assessment failed.
        '500':
          description: Internal server error.

  /model-card-creation:
    post:
      summary: Model Card Creation
      description: >
        Create a model card for the trained model to document its details.
      tags:
        - Documentation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelCardCreationRequest'
      responses:
        '200':
          description: Model card created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelCardCreationResponse'
        '400':
          description: Model card creation failed.
        '500':
          description: Internal server error.

  /model-marketplace:
    post:
      summary: Model Marketplace Upload
      description: >
        Upload the trained model to the model marketplace.
      tags:
        - Model Serving and Monitoring 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelMarketplaceRequest'
      responses:
        '200':
          description: Model uploaded to marketplace successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMarketplaceResponse'
        '400':
          description: Model marketplace upload failed.
        '500':
          description: Internal server error.

  /model-downloads:
    get:
      summary: Model Downloads
      description: >
        Retrieve models available for download from the marketplace.
      tags:
        - Model Serving and Monitoring 
      responses:
        '200':
          description: List of available models.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDownloadsResponse'
        '500':
          description: Internal server error.

  /model-deployment:
    post:
      summary: Model Deployment
      description: >
        Deploy the containerized model to the production environment.
      tags:
        - Model Serving and Monitoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelDeploymentRequest'
      responses:
        '200':
          description: Model deployed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDeploymentResponse'
        '400':
          description: Model deployment failed.
        '500':
          description: Internal server error.

  /model-monitoring:
    post:
      summary: Model Monitoring
      description: >
        Monitor the deployed model for performance and drift detection.
      tags:
        - Model Serving and Monitoring 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelMonitoringRequest'
      responses:
        '200':
          description: Model monitoring started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMonitoringResponse'
        '400':
          description: Model monitoring failed.
        '500':
          description: Internal server error.

components:
  schemas:
    DataIntakeResponse:
      type: object
      properties:
        rawDataId:
          type: string
          description: Identifier for the uploaded raw data.
        namingStandard:
          type: string
          description: Naming standard applied to the data.
        dataCardId:
          type: string
          description: Data card associated with the uploaded data.
      required:
        - rawDataId

    DataFilteringRequest:
      type: object
      properties:
        rawDataId:
          type: string
          description: Identifier of the raw data to filter.
        filterCriteria:
          type: object
          additionalProperties: true
          description: Criteria to filter the data.
      required:
        - rawDataId
        - filterCriteria

    DataFilteringResponse:
      type: object
      properties:
        filteredDataId:
          type: string
          description: Identifier for the filtered data.
      required:
        - filteredDataId

    DataLabelingRequest:
      type: object
      properties:
        filteredDataId:
          type: string
          description: Identifier of the filtered data to label.
        labelingInstructions:
          type: string
          description: Instructions for labeling the data.
      required:
        - filteredDataId
        - labelingInstructions

    DataLabelingResponse:
      type: object
      properties:
        labeledDataId:
          type: string
          description: Identifier for the labeled data.
      required:
        - labeledDataId

    DataAnalysisRequest:
      type: object
      properties:
        curatedDataId:
          type: string
          description: Identifier of the curated data to analyze.
        analysisParameters:
          type: object
          additionalProperties: true
          description: Parameters for data analysis.
      required:
        - curatedDataId

    DataAnalysisResponse:
      type: object
      properties:
        analysisReportId:
          type: string
          description: Identifier for the data analysis report.
      required:
        - analysisReportId

    DataMLReadyRequest:
      type: object
      properties:
        curatedDataId:
          type: string
          description: Identifier of the curated data to prepare for ML.
        transformationParameters:
          type: object
          additionalProperties: true
          description: Parameters for data transformation.
      required:
        - curatedDataId

    DataMLReadyResponse:
      type: object
      properties:
        mlReadyDataId:
          type: string
          description: Identifier for the ML-ready data.
      required:
        - mlReadyDataId

    DataTestRequest:
      type: object
      properties:
        curatedDataId:
          type: string
          description: Identifier of the curated data to test.
        testParameters:
          type: object
          additionalProperties: true
          description: Parameters for data testing.
      required:
        - curatedDataId

    DataTestResponse:
      type: object
      properties:
        testReportId:
          type: string
          description: Identifier for the data test report.
      required:
        - testReportId

    DataEvaluationRequest:
      type: object
      properties:
        draftDataCardId:
          type: string
          description: Identifier of the draft data card.
        curatedDataId:
          type: string
          description: Identifier of the curated data.
        metadataTransforms:
          type: object
          additionalProperties: true
          description: Metadata for transforms.
        dataTestReportId:
          type: string
          description: Identifier of the data test report.
        groundTruthLabelsId:
          type: string
          description: Identifier of the ground truth labels (optional).
      required:
        - draftDataCardId
        - curatedDataId
        - metadataTransforms
        - dataTestReportId

    DataEvaluationResponse:
      type: object
      properties:
        dataEvaluationReportId:
          type: string
          description: Identifier for the data evaluation report.
      required:
        - dataEvaluationReportId

    DataCardFinalizationRequest:
      type: object
      properties:
        draftDataCardId:
          type: string
          description: Identifier of the draft data card.
        dataCurationDescription:
          type: string
          description: Description of the data curation process.
        dataEvaluationReportId:
          type: string
          description: Identifier of the data evaluation report.
        dataHandlingGuidance:
          type: string
          description: Data handling guidance (optional).
      required:
        - draftDataCardId
        - dataCurationDescription
        - dataEvaluationReportId

    DataCardFinalizationResponse:
      type: object
      properties:
        finalDataCardId:
          type: string
          description: Identifier for the finalized data card.
      required:
        - finalDataCardId

    ModelTrainingRequest:
      type: object
      properties:
        mlReadyDataId:
          type: string
          description: Identifier of the ML-ready data for training.
        hyperparameters:
          type: object
          additionalProperties:
            type: string
          description: ML algorithm hyperparameters in JSON format.
      required:
        - mlReadyDataId
        - hyperparameters

    ModelTrainingResponse:
      type: object
      properties:
        modelId:
          type: string
          description: Identifier for the trained model.
        modelWeightsLocation:
          type: string
          description: Location of the model weights file.
      required:
        - modelId
        - modelWeightsLocation

    ModelContainerizationRequest:
      type: object
      properties:
        modelId:
          type: string
          description: Identifier of the model to containerize.
        containerizationParameters:
          type: object
          additionalProperties: true
          description: Parameters for model containerization.
      required:
        - modelId

    ModelContainerizationResponse:
      type: object
      properties:
        containerImageId:
          type: string
          description: Identifier for the containerized model image.
      required:
        - containerImageId

    ModelHardeningRequest:
      type: object
      properties:
        containerImageId:
          type: string
          description: Identifier of the containerized model to harden.
        hardeningParameters:
          type: object
          additionalProperties: true
          description: Parameters for model hardening.
      required:
        - containerImageId

    ModelHardeningResponse:
      type: object
      properties:
        hardenedContainerImageId:
          type: string
          description: Identifier for the hardened container image.
      required:
        - hardenedContainerImageId

    RiskAssessmentRequest:
      type: object
      properties:
        hardenedContainerImageId:
          type: string
          description: Identifier of the hardened container image to assess.
        riskAssessmentFramework:
          type: string
          description: Framework to use for risk assessment (e.g., NIST).
      required:
        - hardenedContainerImageId
        - riskAssessmentFramework

    RiskAssessmentResponse:
      type: object
      properties:
        riskAssessmentReportId:
          type: string
          description: Identifier for the risk assessment report.
      required:
        - riskAssessmentReportId

    ModelCardCreationRequest:
      type: object
      properties:
        modelId:
          type: string
          description: Identifier of the trained model.
        modelDetails:
          type: object
          additionalProperties: true
          description: Details about the model for the model card.
      required:
        - modelId
        - modelDetails

    ModelCardCreationResponse:
      type: object
      properties:
        modelCardId:
          type: string
          description: Identifier for the created model card.
      required:
        - modelCardId

    ModelMarketplaceRequest:
      type: object
      properties:
        modelId:
          type: string
          description: Identifier of the model to upload.
        marketplaces:
          type: array
          items:
            type: string
          description: List of marketplaces to upload the model to.
      required:
        - modelId

    ModelMarketplaceResponse:
      type: object
      properties:
        marketplaceUploadStatus:
          type: object
          additionalProperties: true
          description: Status of the model upload to marketplaces.
      required:
        - marketplaceUploadStatus

    ModelDownloadsResponse:
      type: object
      properties:
        availableModels:
          type: array
          items:
            type: object
            properties:
              modelId:
                type: string
              modelName:
                type: string
              description:
                type: string
      required:
        - availableModels

    ModelDeploymentRequest:
      type: object
      properties:
        containerImageId:
          type: string
          description: Identifier of the containerized model to deploy.
        deploymentParameters:
          type: object
          additionalProperties: true
          description: Parameters for model deployment.
      required:
        - containerImageId

    ModelDeploymentResponse:
      type: object
      properties:
        deploymentId:
          type: string
          description: Identifier for the model deployment.
        endpointUrl:
          type: string
          format: uri
          description: URL of the deployed model endpoint.
      required:
        - deploymentId
        - endpointUrl

    ModelMonitoringRequest:
      type: object
      properties:
        deploymentId:
          type: string
          description: Identifier of the deployed model to monitor.
        monitoringParameters:
          type: object
          additionalProperties: true
          description: Parameters for model monitoring.
      required:
        - deploymentId

    ModelMonitoringResponse:
      type: object
      properties:
        monitoringJobId:
          type: string
          description: Identifier for the model monitoring job.
      required:
        - monitoringJobId

  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

security:
  - apiKeyAuth: []

tags:
  - name: Data Ingestion
    description: >
      Processes related to acquiring and importing data.
      **Primary Personas:** Data Engineers, Platform Engineers
  - name: Data Processing
    description: >
      Activities involving data filtering, labeling, and feature engineering to prepare data for analysis and modeling.
      **Primary Personas:** Data Engineers, Data Scientists, ML Engineers
  - name: Exploratory Data Analysis (EDA)
    description: >
      Analyzing data to derive meaningful insights and support decision-making processes.
      **Primary Personas:** Data Scientists, Data Engineers
  - name: Data Preparation
    description: >
      Transforming and refining data to make it suitable for machine learning applications.
      **Primary Personas:** Data Engineers, Data Scientists
  - name: Data Validation
    description: >
      Testing and evaluating data quality to ensure accuracy and reliability for modeling.
      **Primary Personas:** Data Scientists, Quality Assurance (QA) Engineers, Data Engineers
  - name: Metadata Documentation
    description: >
      Finalizing and documenting metadata, including data cards, to provide comprehensive information about datasets.
      **Primary Personas:** Data Engineers, Product Managers, Business & Strategy Leaders
  - name: Model Training
    description: >
      Training machine learning models using prepared and validated data to develop predictive capabilities.
      **Primary Personas:** ML Engineers, Data Scientists
  - name: Model Deployment
    description: >
      Deploying trained models into production environments, including testing, evaluation, containerization, security scanning, and risk assessment.
      **Primary Personas:** ML Engineers, Platform Engineers, Security & Compliance Officers, IT Operations
  - name: Documentation
    description: >
      Creating and maintaining comprehensive documentation for models, such as model cards, to ensure transparency and facilitate understanding.
      **Primary Personas:** AI Engineers / Intelligent App Developers, Product Managers, Data Scientists
  - name: Model Serving and Monitoring
    description: >
      Managing the distribution and integration of models through marketplaces and downloads, as well as ongoing monitoring to ensure performance and reliability.
      **Primary Personas:** AI Engineers / Intelligent App Developers, Data Scientists, ML Engineers, Quality Assurance (QA) Engineers, IT Operations
